Texture2D tex : register(t0);
SamplerState samplerLinear : register(s0);
Texture2D normalsTexture : register(t1);
SamplerState normalSampler : register(s1);

struct PS_INPUT
{
    float4 Pos : SV_POSITION;
    float3 Normal : NORMAL;
    float3 Tangent : TANGENT;
    float2 TexCoords : TEXCOORD;
};

float4 PS(PS_INPUT input) : SV_Target0
{
	float3 lightDir = normalize(float3(1, 1, 0));
	float3 lightColour = float3(1,1,1);
	float3 ambient = float3(0.5,0.5,0.5);
	
	// normal mapping
	float3 normal = normalize(input.Normal);
	float3 tangent = normalize(input.Tangent);
	float3 binormal = normalize(cross(input.Normal, tangent));
	float3x3 TBN = float3x3(tangent, binormal, normal);
	
	float3 mapNormal = normalsTexture.Sample(normalSampler, input.TexCoords).xyz;
	mapNormal = mapNormal * 2.0 - 1.0;

	float3 localLightDir = mul(lightDir, transpose(TBN));

    	// albedo
	float4 albedo;
	albedo = tex.Sample(samplerLinear, input.TexCoords);
	if (albedo.a < 0.5)
	{
    		discard;
	}
	
	// diffuse
	float3 diffuse = (albedo / PI) * (lightColour * max(dot(mapNormal, localLightDir)) + ambient );
	
	return float4(diffuse.rgb, 1.0);

}
